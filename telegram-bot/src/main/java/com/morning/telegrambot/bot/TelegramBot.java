package com.morning.telegrambot.bot;

import com.morning.telegrambot.config.BotConfig;
import com.morning.telegrambot.exception.TelegramExceptionTranslator;
import com.morning.telegrambot.handler.AuthHandler;
import com.morning.telegrambot.handler.ProjectHandler;
import com.morning.telegrambot.handler.TaskHandler;
import com.morning.telegrambot.service.UserStateService;
import lombok.RequiredArgsConstructor;
import org.springframework.stereotype.Component;
import org.telegram.telegrambots.bots.TelegramLongPollingBot;
import org.telegram.telegrambots.meta.api.methods.send.SendMessage;
import org.telegram.telegrambots.meta.api.objects.Update;
import org.telegram.telegrambots.meta.exceptions.TelegramApiException;


@Component
@RequiredArgsConstructor
public class TelegramBot extends TelegramLongPollingBot {

    private final AuthHandler authHandler;
    private final TaskHandler taskHandler;
    private final ProjectHandler projectHandler;
    private final UserStateService userStateService;
    private final BotConfig botConfig;
    private final TelegramExceptionTranslator exceptionTranslator;

    @Override
    public String getBotUsername() {
        return botConfig.getBotUsername();
    }

    @Override
    public String getBotToken() {
        return botConfig.getBotToken();
    }

    @Override
    public void onUpdateReceived(Update update) {
        if (update.hasMessage() && update.getMessage().hasText()) {
            Long chatId = update.getMessage().getChatId();
            String messageText = update.getMessage().getText();
            String responseText;

            try {
                // 1. –ö–æ–º–∞–Ω–¥–∞ /cancel ‚Äî –≤—Å–µ–≥–¥–∞ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –ø–µ—Ä–≤–æ–π
                if (messageText.equalsIgnoreCase("/cancel")) {
                    userStateService.clearUserState(chatId);
                    responseText = "üö´ –¢–µ–∫—É—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ. –í—ã –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ.";
                }
                // 2. –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                else {
                    String userState = userStateService.getUserState(chatId);

                    if (userState != null && userState.startsWith("LOGIN_")) {
                        responseText = authHandler.handleLogin(chatId, messageText);
                    } else if (messageText.startsWith("/login")) {
                        responseText = authHandler.handleLogin(chatId, messageText);
                    } else if (messageText.startsWith("/tasks")) {
                        responseText = taskHandler.handleTaskCommand(chatId, messageText);
                    } else if (messageText.startsWith("/projects")) {
                        responseText = projectHandler.handleProjectCommand(chatId, messageText);
                    } else if (messageText.startsWith("/help")) {
                        responseText = getHelpMessage();
                    } else if (messageText.startsWith("/clear")) {
                        responseText = authHandler.handleClearCommand(chatId);
                    } else if (messageText.startsWith("/debug")) {
                        responseText = authHandler.handleGetAccountInfo(chatId);
                    } else {
                        responseText = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help.";
                    }
                }
            } catch (Exception e) {
                // –ø–æ—Å–ª–µ–¥–Ω–∏–π —É—Ä–æ–≤–µ–Ω—å –ø–µ—Ä–µ—Ö–≤–∞—Ç–∞ –æ—à–∏–±–æ–∫
                responseText = exceptionTranslator.toUserMessage(chatId, e); // —É–¥–æ–±–Ω–æ!
                e.printStackTrace(); // –æ—Å—Ç–∞–≤–∏—Ç—å –ø–æ–∫–∞ —Ä–∞–∑—Ä–∞–±–∞—Ç—ã–≤–∞–µ—à—å
            }

            sendMessage(chatId, responseText);
        }
    }



    public void sendMessage(Long chatId, String text) {
        SendMessage message = new SendMessage();
        message.setChatId(chatId.toString());
        message.enableHtml(true); // üëà –í–∫–ª—é—á–∞–µ–º HTML-—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
        message.setText(text);
        try {
            execute(message);
        } catch (TelegramApiException e) {
            e.printStackTrace();
        }
    }

    public void sendNotification(Long chatId, String text) {
        SendMessage message = new SendMessage();
        message.setChatId(chatId.toString());
        message.enableHtml(false); // üëà –í–∫–ª—é—á–∞–µ–º HTML-—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
        message.setText(text);
        try {
            execute(message);
        } catch (TelegramApiException e) {
            e.printStackTrace();
        }
    }

    private String getHelpMessage() {
        return """
            ‚Ñπ <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>

<b>üë§ –ê–í–¢–û–†–ò–ó–ê–¶–ò–Ø</b>
/login   ‚Äî –í–æ–π—Ç–∏ –≤ –∞–∫–∫–∞—É–Ω—Ç
/cancel  ‚Äî –û—Ç–º–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ
/clear - –æ—á–∏—Å—Ç–∏—Ç—å –±–¥ –ø–æ –∞–∫–∫–∞—É–Ω—Ç—É
/debug - –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ç—É—Å –ø–æ –∞–∫–∫–∞—É–Ω—Ç—É

<b>üìã –ó–ê–î–ê–ß–ò</b>
/tasks         ‚Äî –°–ø–∏—Å–æ–∫ –≤–∞—à–∏—Ö –∑–∞–¥–∞—á
/task_create   ‚Äî –°–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É (–≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ)

<b>üìÅ –ü–†–û–ï–ö–¢–´</b>
/projects      ‚Äî –°–ø–∏—Å–æ–∫ –≤–∞—à–∏—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤

<b>‚ùì –û–ë–©–ò–ï</b>
/help    ‚Äî –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ –º–µ–Ω—é
""";
    }
}


